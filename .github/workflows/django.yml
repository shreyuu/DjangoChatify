name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ["3.9", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --quiet
          pip install -r requirements.txt --quiet
          pip install -r requirements-dev.txt --quiet

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until nc -z localhost 5432; do sleep 1; done' > /dev/null 2>&1
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done' > /dev/null 2>&1

      - name: Create .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY || 'test-secret-key-for-ci' }}" >> .env
          echo "DB_NAME=test_db" >> .env
          echo "DB_USER=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env

      - name: Run migrations
        run: |
          python manage.py migrate --verbosity=0

      - name: Django system check
        run: |
          python manage.py check --verbosity=0

      - name: Run minimal tests
        run: |
          python manage.py test --verbosity=1
        env:
          DJANGO_SETTINGS_MODULE: backend.settings

  build:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t djangochatify:latest . --quiet

      - name: Test container startup
        run: |
          docker run --rm -d --name test-container \
            -e SECRET_KEY=test-key \
            -p 8000:8000 \
            djangochatify:latest > /dev/null 2>&1

          sleep 10
          docker ps --filter name=test-container --format "table {{.Names}}\t{{.Status}}"
          docker stop test-container > /dev/null 2>&1
